version: '3.9'

services:        
    db_one:
      image: postgres:13
      container_name: db_one
      hostname: db_one
      environment:
        - 'POSTGRES_PASSWORD=postgres'
        - 'POSTGRES_DB=db_one'
        - 'POSTGRES_USER=postgres'
      volumes:
        - "../data/db_one:/var/lib/postgresql/data"
      networks:
        - atmnet
      healthcheck:
        test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres --dbname db_one'"]
        interval: 10s
        timeout: 5s
        retries: 3
      restart: always
      
    
    db_two:
      image: postgres:13
      container_name: db_two
      hostname: db_two
      environment:
        - 'POSTGRES_PASSWORD=postgres'
        - 'POSTGRES_DB=db_two'
      volumes:
        - "../data/db_two:/var/lib/postgresql/data"
      networks:
        - atmnet
      healthcheck:
        test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres --dbname db_two'"]
        interval: 10s
        timeout: 5s
        retries: 3
      restart: always

    db_three:
      image: postgres:13
      container_name: db_three
      hostname: db_three
      environment:
        - 'POSTGRES_PASSWORD=postgres'
        - 'POSTGRES_DB=db_three'
      volumes:
        - "../data/db_three:/var/lib/postgresql/data"
      networks:
        - atmnet
      healthcheck:
        test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres --dbname db_three'"]
        interval: 10s
        timeout: 5s
        retries: 3
      restart: always   
    
    atm_one: 
      image: atm:latest
      container_name: atm_one
      hostname: atm_one
      networks:
        - atmnet
      restart: always
      depends_on:
        db_one : 
          condition: service_healthy
      environment:
            - DB_NAME=db_one
            - HOST_NAME=atm_one
            - PORT=8080
      entrypoint: python
      command: app.py
    

    atm_two: 
      image: atm:latest
      container_name: atm_two
      hostname: atm_two
      networks:
        - atmnet
      restart: always
      depends_on:
        db_two : 
          condition: service_healthy
      environment:
        - DB_NAME=db_two
        - HOST_NAME=atm_two
        - PORT=8080
      entrypoint: python
      command: app.py
    

    atm_three: 
      image: atm:latest
      container_name: atm_three
      hostname: atm_three
      networks:
        - atmnet
      restart: always
      depends_on:
        db_one : 
          condition: service_healthy
      environment:
            - DB_NAME=db_three
            - HOST_NAME=atm_three
            - PORT=8080
      entrypoint: python
      command: app.py
    
networks:
    atmnet:
      driver: bridge



# version: '3.9'
# services:
#     reverse_proxy:
#         image: nginx
#         container_name: reverse_proxy
#         volumes:
#             - ./nginx.conf:/etc/nginx/nginx.conf
#         ports:
#             - 8080:80
#         deploy:
#         networks:       
#             - custom
#         depends_on:
#             - atm_one
#             - atm_two
#             - atm_three
    
#     atm_one:
#         image: mbq:latest
#         container_name: atm_one
#         hostname: atm_one
#         restart: always
#         deploy: 
#             replicas: 1
#         networks:       
#             - custom
#         entrypoint: python
#         command: -u ./app.py
#         depends_on:
#             db_one:
#                     condition: service_healthy
#         environment:
#             - DB_NAME=manager_db
#             - HOST_NAME=main_db_three

#     read_manager_one:
#         image: mbq:latest
#         container_name: read_manager_one
#         deploy:
#             replicas: 1
#         restart: always
#         networks:       
#             - custom
#         entrypoint: python
#         command: -u ./ServiceProviders/RMWrapper.py
#         hostname: read_manager_one
#         depends_on:
#             main_db_one:
#                     condition: service_healthy
#         environment:
#             - DB_NAME=manager_db
#             - HOST_NAME=main_db_one

#     read_manager_two:
#         image: mbq:latest
#         container_name: read_manager_two
#         deploy:
#             replicas: 1
#         restart: always

#         networks:       
#             - custom
#         entrypoint: python
#         command: -u ./ServiceProviders/RMWrapper.py
#         hostname: read_manager_two
#         depends_on:
#             main_db_two:
#                     condition: service_healthy
#         environment:
#             - DB_NAME=manager_db
#             - HOST_NAME=main_db_two


# main_db_one: 
#         image: postgres:13
#         container_name: main_db_one
#         restart: always
#         volumes:
#                 - ../data/main_db_one:/var/lib/postgresql/data
#                 - ./our-postgres.conf:/etc/postgresql/postgresql.conf
#                 - ./our-pg_hba.conf:/etc/postgresql/pg_hba.conf
#                 - ./init-db-read.sh:/docker-entrypoint-initdb.d/init-db.sh
#         hostname: main_db_one
#         environment:
#                 - 'POSTGRES_PASSWORD=postgres'
#                 - 'POSTGRES_DB=manager_db'
#         healthcheck:
#             test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres --dbname manager_db'"]
#             interval: 10s
#             timeout: 5s
#             retries: 3
#         networks:       
#             - custom
#         depends_on:
#             main_db_three:
#                     condition: service_healthy

# networks:
#     custom:
#         driver: bridge