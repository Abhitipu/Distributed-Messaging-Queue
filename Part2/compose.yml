version: '3.9'
services:
    reverse_proxy:
        image: nginx
        container_name: reverse_proxy
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
        ports:
            - 8080:80
        deploy:
        networks:       
            - custom
        depends_on:
            - read_manager_one
            - read_manager_two
    
    write_manager:
        image: mbq:latest
        container_name: write_manager
        hostname: write_manager
        restart: always
        deploy: 
            replicas: 1
        networks:       
            - custom
        entrypoint: python
        command: -u ./ServiceProviders/WMWrapper.py
        depends_on:
            main_db_three:
                    condition: service_healthy
        environment:
            - DB_NAME=manager_db
            - HOST_NAME=main_db_three

    read_manager_one:
        image: mbq:latest
        container_name: read_manager_one
        deploy:
            replicas: 1
        restart: always
        networks:       
            - custom
        entrypoint: python
        command: -u ./ServiceProviders/RMWrapper.py
        hostname: read_manager_one
        depends_on:
            main_db_one:
                    condition: service_healthy
        environment:
            - DB_NAME=manager_db
            - HOST_NAME=main_db_one

    read_manager_two:
        image: mbq:latest
        container_name: read_manager_two
        deploy:
            replicas: 1
        restart: always

        networks:       
            - custom
        entrypoint: python
        command: -u ./ServiceProviders/RMWrapper.py
        hostname: read_manager_two
        depends_on:
            main_db_two:
                    condition: service_healthy
        environment:
            - DB_NAME=manager_db
            - HOST_NAME=main_db_two

    
    broker_one:
        image: mbq:latest
        networks:       
            - custom
        restart: always
        hostname: broker_one
        depends_on:
            db_one:
                    condition: service_healthy
        environment:
            - DB_NAME=db_one
            - PORT1=4321
            - PORT2=4567
        volumes:
            - ../data/broker_one:/app/scratch
        entrypoint: python
        command: -u ./Brokers/BrokerWrapper.py
    
    db_one:
        image: postgres:13
        container_name: db_one
        restart: always
        volumes:
                - ../data/db_one:/var/lib/postgresql/data
        hostname: db_one
        environment:
                - 'POSTGRES_PASSWORD=postgres'
                - 'POSTGRES_DB=db_one'
        healthcheck:
            test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres --dbname db_one'"]
            interval: 10s
            timeout: 5s
            retries: 3
        networks:       
            - custom
 

    broker_two:
        image: mbq:latest
        networks:       
            - custom
        restart: always
        hostname: broker_two
        depends_on:
            db_two:
                    condition: service_healthy
        environment:
            - DB_NAME=db_two
            - PORT1=4321
            - PORT2=4567
        volumes:
            - ../data/broker_two:/app/scratch
        entrypoint: python
        command: -u ./Brokers/BrokerWrapper.py
    
    db_two:
        image: postgres:13
        container_name: db_two
        restart: always
        volumes:
                - ../data/db_two:/var/lib/postgresql/data
        hostname: db_two
        environment:
                - 'POSTGRES_PASSWORD=postgres'
                - 'POSTGRES_DB=db_two'
        healthcheck:
            test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres --dbname db_two'"]
            interval: 10s
            timeout: 5s
            retries: 3
        networks:       
            - custom


    broker_three:
        image: mbq:latest
        networks:       
            - custom
        restart: always
        hostname: broker_three
        depends_on:
            db_three:
                    condition: service_healthy
        environment:
            - DB_NAME=db_three
            - PORT1=4321
            - PORT2=4567
        volumes:
            - ../data/broker_three:/app/scratch
        entrypoint: python
        command: -u ./Brokers/BrokerWrapper.py
    
    db_three:
        image: postgres:13
        container_name: db_three
        restart: always
        volumes:
                - ../data/db_three:/var/lib/postgresql/data
        hostname: db_three
        environment:
                - 'POSTGRES_PASSWORD=postgres'
                - 'POSTGRES_DB=db_three'
        healthcheck:
            test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres --dbname db_three'"]
            interval: 10s
            timeout: 5s
            retries: 3
        networks:       
            - custom
    

    broker_four:
        image: mbq:latest
        networks:       
            - custom
        restart: always
        hostname: broker_four
        depends_on:
            db_four:
                    condition: service_healthy
        environment:
            - DB_NAME=db_four
            - PORT1=4321
            - PORT2=4567
        volumes:
            - ../data/broker_four:/app/scratch
        entrypoint: python
        command: -u ./Brokers/BrokerWrapper.py
    
    db_four:
        image: postgres:13
        container_name: db_four
        restart: always
        volumes:
                - ../data/db_four:/var/lib/postgresql/data
        hostname: db_four
        environment:
                - 'POSTGRES_PASSWORD=postgres'
                - 'POSTGRES_DB=db_four'
        healthcheck:
            test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres --dbname db_four'"]
            interval: 10s
            timeout: 5s
            retries: 3
        networks:       
            - custom

    
    broker_five:
        image: mbq:latest
        networks:       
            - custom
        restart: always
        hostname: broker_five
        depends_on:
            db_five:
                    condition: service_healthy
        environment:
            - DB_NAME=db_five
            - PORT1=4321
            - PORT2=4567
        volumes:
            - ../data/broker_five:/app/scratch
        entrypoint: python
        command: -u ./Brokers/BrokerWrapper.py
    
    db_five:
        image: postgres:13
        container_name: db_five
        restart: always
        volumes:
                - ../data/db_five:/var/lib/postgresql/data
        hostname: db_five
        environment:
                - 'POSTGRES_PASSWORD=postgres'
                - 'POSTGRES_DB=db_five'
        healthcheck:
            test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres --dbname db_five'"]
            interval: 10s
            timeout: 5s
            retries: 3
        networks:       
            - custom


    
    broker_six:
        image: mbq:latest
        networks:       
            - custom
        restart: always
        hostname: broker_six
        depends_on:
            db_six:
                    condition: service_healthy
        environment:
            - DB_NAME=db_six
            - PORT1=4321
            - PORT2=4567
        volumes:
            - ../data/broker_six:/app/scratch
        entrypoint: python
        command: -u ./Brokers/BrokerWrapper.py
    
    db_six:
        image: postgres:13
        container_name: db_six
        restart: always
        volumes:
                - ../data/db_six:/var/lib/postgresql/data
        hostname: db_six
        environment:
                - 'POSTGRES_PASSWORD=postgres'
                - 'POSTGRES_DB=db_six'
        healthcheck:
            test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres --dbname db_six'"]
            interval: 10s
            timeout: 5s
            retries: 3
        networks:       
            - custom

    main_db_one: 
        image: postgres:13
        container_name: main_db_one
        restart: always
        volumes:
                - ../data/main_db_one:/var/lib/postgresql/data
                - ./our-postgres.conf:/etc/postgresql/postgresql.conf
                - ./our-pg_hba.conf:/etc/postgresql/pg_hba.conf
                - ./init-db-read.sh:/docker-entrypoint-initdb.d/init-db.sh
        hostname: main_db_one
        environment:
                - 'POSTGRES_PASSWORD=postgres'
                - 'POSTGRES_DB=manager_db'
        healthcheck:
            test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres --dbname manager_db'"]
            interval: 10s
            timeout: 5s
            retries: 3
        networks:       
            - custom
        depends_on:
            main_db_three:
                    condition: service_healthy
    main_db_two: 
        image: postgres:13
        container_name: main_db_two
        restart: always
        volumes:
                - ../data/main_db_two:/var/lib/postgresql/data
                - ./our-postgres.conf:/etc/postgresql/postgresql.conf
                - ./our-pg_hba.conf:/etc/postgresql/pg_hba.conf
                - ./init-db-read.sh:/docker-entrypoint-initdb.d/init-db.sh

        hostname: main_db_two
        environment:
                - 'POSTGRES_PASSWORD=postgres'
                - 'POSTGRES_DB=manager_db'
        healthcheck:
            test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres --dbname manager_db'"]
            interval: 10s
            timeout: 5s
            retries: 3
        networks:       
            - custom
        depends_on:
            main_db_three:
                    condition: service_healthy

    


    main_db_three: 
        image: postgres:13
        container_name: main_db_three
        restart: always
        volumes:
                - ../data/main_db_three:/var/lib/postgresql/data
                - ../data/main_db_one:/var/lib/postgresql/data_read_1
                - ../data/main_db_two:/var/lib/postgresql/data_read_2
                - ./our-postgres.conf:/etc/postgresql/postgresql.conf
                - ./our-pg_hba.conf:/etc/postgresql/pg_hba.conf
                # - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
                - ./init-db.sh:/etc/postgresql/init-script/init-db.sh

        hostname: main_db_three
        environment:
                - 'POSTGRES_PASSWORD=postgres'
                - 'POSTGRES_DB=manager_db'
        ports:
            - 5432:5432
        healthcheck:
            test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres --dbname manager_db'"]
            interval: 10s
            timeout: 5s
            retries: 3
        networks:       
            - custom

    
    



networks:
    custom:
        driver: bridge
